#!/usr/bin/env python3

# Copyright Â© 2013-2019 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import ast
import subprocess
import sys

if sys.version_info < (3, 4):
    raise RuntimeError('Python >= 3.4 is required')

class RewriteBooleans(ast.NodeTransformer):

   def visit_Name(self, node):
       if node.id == 'FALSE':
           return ast.NameConstant(value=False)
       elif node.id == 'TRUE':
           return ast.NameConstant(value=True)
       return node

def parse_configdump(source):
    module = ast.parse(source)
    module = RewriteBooleans().visit(module)
    if not isinstance(module, ast.Module):
        raise RuntimeError
    for item in module.body:
        if not isinstance(item, ast.Assign):
            continue
        for target in item.targets:
            if not isinstance(target, ast.Name):
                continue
            if target.id == 'fetchmailrc':
                return ast.literal_eval(item.value)
    raise RuntimeError

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('server', metavar='SERVER')
    ap.add_argument('user', metavar='USER', nargs='?')
    options = ap.parse_args()
    output = subprocess.check_output(['fetchmail', '--configdump'])
    data = parse_configdump(output)
    servers = data['servers']
    for server in servers:
        if server['pollname'] != options.server:
            continue
        for user in server['users']:
            if (options.user is None) or (user['remote'] == options.user):
                print(user['password'])

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
